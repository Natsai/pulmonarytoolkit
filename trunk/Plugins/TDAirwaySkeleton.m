classdef TDAirwaySkeleton < TDPlugin
    % TDAirwaySkeleton. Plugin for skeletonising the pulmonary airway tree.
    %
    %     This is a plugin for the Pulmonary Toolkit. Plugins can be run using 
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See TDPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     TDAirwaySkeleton calls the TDAirways plugin to segment the airway
    %     tree. It then uses the TDSkeletonise library routine to reduce the
    %     airway tree to a skeleton. The results are stored in a heirarchical
    %     tree structure.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image showing skeleton points as colour 1,
    %     bifurcation points as 3 and removed internal loop points as 6.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. http://code.google.com/p/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %    
    
    
    
    properties
        ButtonText = 'Airway <BR>Skeleton'
        ToolTip = 'Show airway skeletonisation results processed globally'
        Category = 'Airways'

        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        TDPTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
    end
    
    methods (Static)
        function results = RunPlugin(dataset, reporting)
            reporting.ShowProgress('Finding airways');
            [airway_results, segmented_image] = dataset.GetResult('TDAirways');

            start_point = airway_results.start_point;
            start_point_index = sub2ind(airway_results.image_size, start_point(1), start_point(2), start_point(3));
            end_points = airway_results.endpoints;
            fixed_points = [start_point_index, end_points];
            
            segmented_image.ChangeRawImage(uint8(segmented_image.RawImage == 1));
            
            % While each branch of the tree has been closed, there may still be
            % holes where branches meet. Hence we perform a hole filling to
            % ensure this does not cause topoligcal problems with the
            % skeletonisation
            reporting.ShowProgress('Filling holes in airway tree');
            segmented_image = TDFillHolesInImage(segmented_image);

            % Skeletonise
            reporting.ShowProgress('Reducing airways to a skeleton');
            skeleton_image = TDSkeletonise(segmented_image, fixed_points, reporting);

            % The final processing removes closed loops and sorts the skeleton 
            % points into a tree strcuture
            reporting.ShowProgress('Processing skeleton tree');
            results = TDProcessAirwaySkeleton(skeleton_image.RawImage, start_point, reporting);
        end
        
        function results = GenerateImageFromResults(skeleton_results, image_templates, ~)
            template_image = image_templates.GetTemplateImage(TDContext.LungROI);

            new_image = zeros(skeleton_results.image_size, 'uint8');
            new_image(skeleton_results.original_skeleton_points) = 2;
            new_image(skeleton_results.skeleton_points) = 1;
            new_image(skeleton_results.removed_points) = 6;
            new_image(skeleton_results.bifurcation_points) = 3;
            
            results = template_image.BlankCopy;
            results.ChangeRawImage(new_image);
            results.ImageType = TDImageType.Colormap;
            
        end
    end
end
